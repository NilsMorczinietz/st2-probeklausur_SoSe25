1. Daten eines `Doctor` abfragen (ohne Ausgabe der `AppointmentSlots`):
  - URI: /doctors/{doctor-id}
  - HTTPVerb: GET
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert
      - 409: n.a.
      - 422: n.a.

2. Spezialisierung (`specialization`) eines `Doctor` ändern:
  - URI: /doctors/{doctor-id}
  - HTTPVerb: PATCH
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert
      - 409: n.a.
      - 422: wenn das DTO leer ist, oder das specialization-Property einen leeren String enthält

3. `Doctor` neu anlegen:
  - URI: /doctors
  - HTTPVerb: POST
  - ReturnCodeSuccess: 201
  - ReturnCodeFailure:
      - 404: n.a.
      - 409: (Ggf. wenn kein zweiter Doktor mit dem gleichen Namen existieren darf)
      - 422: Wenn das DTO leer bzw. unvollständig ist (z.B. name fehlt ganz), name ist emptyString, specialization ist empty String (ggf. wenn specialization nicht in Menge der validen specializations)

4. `AppointmentSlot` für einen `Doctor` hinzufügen:
  - URI: /doctors/{doctor-id}/appointmentSlots
  - HTTPVerb: POST
  - ReturnCodeSuccess: 201
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert
      - 409: Wenn der übergebener Slot schon unter diesem Doktor schon existiert
      - 422: Wenn das DTO leer bzw. unvollständig ist (z.B. date fehlt ganz), hour > 23, patientName ist empty String, falsches date Format, ...

5. Einen bestimmten `AppointmentSlot` eines `Doctors` für einen Patienten buchen:
  - URI: /doctors/{doctor-id}/appointmentSlots/{appointmentSlot-id}
  - HTTPVerb: PATCH
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert, wenn appointmentSlot-id nicht im System existiert
      - 409: Slot ist schon ausgebucht (patientName /= undefined)
      - 422: Wenn das DTO leer bzw. unvollständig ist (z.B. patientName fehlt ganz) oder der patientName einen leeren String enthält

6. Alle freien `AppointmentSlots` für einen `Doctor` abfragen:
  - URI: /doctors/{doctor-id}/appointmentSlots?patientName=undefined
  - HTTPVerb: GET
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert
      - 409: n.a.
      - 422: n.a.

7. Alle (sowohl freie wie gebuchte) `AppointmentSlots` für einen `Doctor` stornieren und aus dem System herausnehmen:
  - URI: /doctors/{doctor-id}/appointmentSlots
  - HTTPVerb: DELETE
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
      - 404: wenn doctor-id nicht im System existiert
      - 409: n.a.
      - 422: n.a.