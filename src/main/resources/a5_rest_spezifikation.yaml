1. Daten eines `Doctor` abfragen (ohne Ausgabe der `AppointmentSlots`):
  - URI: /doctors/{doctor-id}
  - HTTPVerb: GET
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
    - 404: wenn doctor-id nicht im System existiert
    - 409:
    - 422:
2. Spezialisierung (`specialization`) eines `Doctor` ändern:
  - URI: /doctors/{doctor-id}
  - HTTPVerb: PATCH
  - ReturnCodeSuccess: 200
  - ReturnCodeFailure:
    - 404: wenn doctor-Id nicht im System existiert
    - 409:
    - 422: wenn das DTO leer ist, oder das specialization-Property einen leeren String enthält
3. `Doctor` neu anlegen:
  - URI:
  - HTTPVerb:
  - ReturnCodeSuccess:
  - ReturnCodeFailure:
    - 404:
    - 409:
    - 422:
4. `AppointmentSlot` für einen `Doctor` hinzufügen:
  - URI:
  - HTTPVerb:
  - ReturnCodeSuccess:
  - ReturnCodeFailure:
    - 404:
    - 409:
    - 422:
5. Einen bestimmten `AppointmentSlot` eines `Doctors` für einen Patienten buchen:
  - URI:
  - HTTPVerb:
  - ReturnCodeSuccess:
  - ReturnCodeFailure:
    - 404:
    - 409:
    - 422:
6. Alle freien `AppointmentSlots` für einen `Doctor` abfragen:
  - URI:
  - HTTPVerb:
  - ReturnCodeSuccess:
  - ReturnCodeFailure:
    - 404:
    - 409:
    - 422:
7. Alle (sowohl freie wie gebuchte) `AppointmentSlots` für einen `Doctor` stornieren:
  - URI:
  - HTTPVerb:
  - ReturnCodeSuccess:
  - ReturnCodeFailure:
    - 404:
    - 409:
    - 422:
